<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vagrant Ansible Getting Started</title>
    <link>https://fteychene.github.io/vagrant-ansible-epsi/</link>
    <description>Recent content on Vagrant Ansible Getting Started</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <lastBuildDate>Wed, 02 Dec 2020 16:00:00 +0200</lastBuildDate><atom:link href="https://fteychene.github.io/vagrant-ansible-epsi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with k3s</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/getting_started/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/getting_started/</guid>
      <description>In this hands-on we will work using k3s, it&amp;rsquo;s a lightweight Kubernetes distribution easy to install.
We will not work with vanilla kubernetes as its installation could be challenging.
Using k3s should not change your experience since we will stay at a beginer level and asics of this distribution work as a vanilla kubernetes.
Setup a VM We will use Vagrant to spawn a VM a work with k3s.
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.</description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/helm/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/helm/</guid>
      <description>Installing Helm Lookup the installation steps from the documentation here
Using Helm This guide explains the basics of using Helm to manage packages on your Kubernetes cluster.
Three Big Concepts A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster. Think of it like the Kubernetes equivalent of a Homebrew formula, an Apt dpkg, or a Yum RPM file.</description>
    </item>
    
    <item>
      <title>Istio</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/istio/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/istio/</guid>
      <description>TDB
In the mean time you can look at official site</description>
    </item>
    
    <item>
      <title>Knative</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/knative/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/knative/</guid>
      <description>TDB
In the mean time you can look at official site</description>
    </item>
    
    <item>
      <title>Play with Heroku</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/paas/play_with_heroku/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/paas/play_with_heroku/</guid>
      <description>Heroku is a platform as a service based on a managed container system, with integrated data services and a powerful ecosystem, for deploying and running modern apps.
You can find instructions about this TP in resource&amp;rsquo;s Heroku PDF</description>
    </item>
    
    <item>
      <title>Traefik</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/traefik/</link>
      <pubDate>Wed, 02 Dec 2020 16:00:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/kubernetes/traefik/</guid>
      <description>Traefik is a load balancer with dynamic configuration reload that can be plugged with various backend to enable routing automatically and it work with Kubernetes.
Traefik is installed by default on k3s clusters so we could use it.
Accessing dashboard Traefik dashboard is not exposed through the exterior of the cluster by default. We need to add a IngressRoute configuration to enable it.
apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: traefik-external-dashboard namespace: kube-system spec: entryPoints: - web routes: - kind: Rule match: PathPrefix(`/dashboard`) || PathPrefix(`/api`) services: - kind: TraefikService name: api@internal Apply this ressource in your cluster and then test to access the Traefik dashboard on http://10.</description>
    </item>
    
    <item>
      <title>Playbook</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/ansible/playbook/</link>
      <pubDate>Mon, 10 Sep 2018 13:30:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/ansible/playbook/</guid>
      <description>Playbook Playbook are another way to define execution of commands on hosts and the principal way of executing Ansible on your infrastructure.
They defines the configuration to be executed and manage on your machines.
Principal diff with simple command execution are :
 Templating Idempotency Reusability  These 3 features are really interesting for managing cofigruation of your infrastructure, coupled with the ansible behavior of push instead of pull.
Introduction Follow the official introduction to Playbook here</description>
    </item>
    
    <item>
      <title>Inventory</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/ansible/inventory/</link>
      <pubDate>Mon, 10 Sep 2018 12:50:00 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/ansible/inventory/</guid>
      <description>Inventory Instead of rewriting something already done : Follow the officiel documentation here
Excercice Launch 2 VMs and split them in group web and db.
Then launch a hostname command on groups web, db and all</description>
    </item>
    
    <item>
      <title>Getting Started with Ansible</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/ansible/getting_started/</link>
      <pubDate>Sun, 09 Sep 2018 22:06:59 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/ansible/getting_started/</guid>
      <description>Create target VM Create a fresh VM with vagrant to use ansible on it with the following configuration
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; config.vm.network :private_network, ip: &amp;#34;192.168.0.2&amp;#34; config.ssh.forward_agent = true config.ssh.insert_key = false config.ssh.private_key_path = [&amp;#34;~/.vagrant.d/insecure_private_key&amp;#34;,&amp;#34;~/.ssh/id_rsa&amp;#34;] config.vm.provision :shell, privileged: false do |s| ssh_pub_key = File.readlines(&amp;#34;#{Dir.home}/.ssh/id_rsa.pub&amp;#34;).first.strip s.inline = &amp;lt;&amp;lt;-SHELL  echo #{ssh_pub_key} &amp;gt;&amp;gt; /home/$USER/.ssh/authorized_keys sudo bash -c &amp;#34;echo #{ssh_pub_key}&amp;gt;&amp;gt; /root/.ssh/authorized_keys&amp;#34; sudo apt-get update sudo apt-get install -y python SHELL end end Ansible use ssh to connect to target VM and execute command on machines.</description>
    </item>
    
    <item>
      <title>Vagrant Multi machine</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/vagrant/multi_machine/</link>
      <pubDate>Sun, 09 Sep 2018 19:06:59 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/vagrant/multi_machine/</guid>
      <description>Multiple machines You can configure a Vagrantfile for multiples VMs at the same time.
You need to use the function vm.define is the main VM configuration like the following configuration.
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;#34;echo Common provisioning&amp;#34; config.vm.define &amp;#34;web&amp;#34; do |web| web.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; web.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;#34;echo Provisioning for Web only&amp;#34; end config.vm.define &amp;#34;db&amp;#34; do |db| db.vm.box = &amp;#34;ubuntu/xenial64&amp;#34; db.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;#34;echo Provisioning for Db only&amp;#34; end end Try to run this configuration.</description>
    </item>
    
    <item>
      <title>Getting Started with Vagrant</title>
      <link>https://fteychene.github.io/vagrant-ansible-epsi/vagrant/getting_started/</link>
      <pubDate>Sun, 09 Sep 2018 14:06:59 +0200</pubDate>
      
      <guid>https://fteychene.github.io/vagrant-ansible-epsi/vagrant/getting_started/</guid>
      <description>Installation Installation instruction can be found on this page
You can verify the installation by running the vagrant command.
▶ vagrant Usage: vagrant [options] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] -v, --version Print the version and exit. -h, --help Print this help. # ... First VM Let&amp;rsquo;s start by crate a VM with vagrant.
▶ vagrant init ubuntu/xenial64 ▶ vagrant up The Vagrant command will download a box (the vagrant term for an VM image for a provider), create a VM based on this image and start it.</description>
    </item>
    
  </channel>
</rss>
